[{"path":"/about_pkgdown_documentation.html","id":null,"dir":"","previous_headings":"","what":"About this documentation","title":"About this documentation","text":"document generated version BioCro specified follows: Commit Hash: 8bef42a Commit Date: Thu, 2 Nov 2023 21:15:19 -0500 Branch: - Generation Date Time: Fri Nov 3 02:19:34 UTC 2023","code":""},{"path":"/articles/pdf_vignette_index.html","id":"a-practical-guide-to-biocro","dir":"Articles","previous_headings":"","what":"A Practical Guide to BioCro","title":"PDF Vignettes","text":"R code Practical Guide BioCro","code":""},{"path":"/articles/pdf_vignette_index.html","id":"quantitative-comparison-between-two-photosynthesis-models","dir":"Articles","previous_headings":"","what":"Quantitative Comparison Between Two Photosynthesis Models","title":"PDF Vignettes","text":"R code Quantitative Comparison Two Photosynthesis Models","code":""},{"path":[]},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"McGrath Justin M.. Maintainer, author. Lochocki Edward B.. Author. Rohde Scott. Author. Jaiswal Deepak. Author. Matthews Megan L.. Author. Miguez Fernando E.. Author. Long Stephen P.. Author. Wang Dan. Contributor. LeBauer David. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Justin M. M, Edward B. L, Scott R, Deepak J, Megan L. M, Fernando E. M, Stephen P. L (2023). BioCro: Software Package Modular Crop Growth Simulations. R package version 2.0.0, https://github.com/ebimodeling/biocro.","code":"@Manual{,   title = {BioCro: A Software Package for Modular Crop Growth Simulations},   author = {McGrath {Justin M.} and Lochocki {Edward B.} and Rohde Scott and Jaiswal Deepak and Matthews {Megan L.} and Miguez {Fernando E.} and Long {Stephen P.}},   year = {2023},   note = {R package version 2.0.0},   url = {https://github.com/ebimodeling/biocro}, }"},{"path":"/index.html","id":"biocro","dir":"","previous_headings":"","what":"BioCro","title":"A Software Package for Modular Crop Growth Simulations","text":"BioCro model predicts plant growth time given crop-specific parameters environmental data input. uses models key physiological biophysical processes underlying plant growth (Humphries Long, 1995), previously used predicting biomass yield leaf area index switchgrass miscanthus (Miguez et al., 2009). BioCro also integrated suite tools link model directly crop trait yield data (LeBauer et al., 2014). Predictive Ecosystem Analyzer (PEcAn) couples BioCro Biofuel Ecophysiological Traits Yields database.","code":""},{"path":"/index.html","id":"an-example","dir":"","previous_headings":"BioCro","what":"An example","title":"A Software Package for Modular Crop Growth Simulations","text":"run_biocro() function accepts initial values, parameters, climate variables, sets modules run. returns results data frame. parameters modules soybean (Glycine max), miscanthus (Miscanthus x giganteus), willow (Saliceae salix).","code":"library(BioCro) library(lattice)  result = run_biocro(soybean_initial_values, soybean_parameters, soybean_weather2002, soybean_direct_modules, soybean_differential_modules, soybean_ode_solver) xyplot(Stem + Leaf ~ TTc, result, type='l')"},{"path":[]},{"path":"/index.html","id":"requirements","dir":"","previous_headings":"BioCro > Installation","what":"Requirements","title":"A Software Package for Modular Crop Growth Simulations","text":"R environment version 3.2.3 greater. Windows, Rtools version 3.3 higher (3.5 recommended 2019-12-05 since version frozen). Linux, gcc g++ version 4.9.3 greater (consult documentation distribution installation instructions). MacOS, Xcode.","code":""},{"path":"/index.html","id":"installation-steps","dir":"","previous_headings":"BioCro > Installation","what":"Installation steps","title":"A Software Package for Modular Crop Growth Simulations","text":"Download BioCro source code GitHub, unzip file, install either command line within R using one following sets commands. one sets instruction . assume source files directory named “biocro”. command line within R","code":"cd path_to_unzipped_directory R CMD INSTALL biocro setwd('path_to_unzipped_directory') install.packages('biocro', repos=NULL, type='SOURCE')"},{"path":"/index.html","id":"making-contributions","dir":"","previous_headings":"BioCro","what":"Making contributions","title":"A Software Package for Modular Crop Growth Simulations","text":"Please see contribution guidelines submitting changes.","code":""},{"path":"/index.html","id":"software-documentation","dir":"","previous_headings":"BioCro","what":"Software Documentation","title":"A Software Package for Modular Crop Growth Simulations","text":"See BioCro Documentation Web Site. found standard package documentation, also documentation C++ code, including notes biological models used BioCro implementation. Also included documentation BioCro package developers maintainers.","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"A Software Package for Modular Crop Growth Simulations","text":"Humphries S Long SP (1995) WIMOVAC - software package modeling dynamics plant leaf canopy photosynthesis. Computer Applications Bioscience 11(4):361-371. Miguez FE, Zhu XG, Humphries S, Bollero GA, Long SP (2009) semimechanistic model predicting growth production bioenergy crop Miscanthus × giganteus: description, parameterization validation. Global Change Biology Bioenergy 1: 282-296. LeBauer D, Wang D, Richter K, Davidson C, Dietze M (2014) Facilitating feedbacks field measurements ecosystem models. Ecological Monographs 83(2): 133-154. Wang D, Jaiswal D, Lebauer DS, Wertin TM, Bollero GA, Leakey ADB, Long SP (2015) physiological biophysical model coppice willow (Salix spp.) production yields contiguous USA current future climate scenarios. Plant, Cell & Environment 38(9), 1850-1865.","code":""},{"path":"/reference/add_time_to_weather_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a time component to input — add_time_to_weather_data","title":"Add a time component to input — add_time_to_weather_data","text":"Ensure, possible, input data varies time \"time\" component.","code":""},{"path":"/reference/add_time_to_weather_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a time component to input — add_time_to_weather_data","text":"","code":"add_time_to_weather_data(drivers)"},{"path":"/reference/add_time_to_weather_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a time component to input — add_time_to_weather_data","text":"drivers list dataframe representing known system parameters vary     time, weather data.","code":""},{"path":"/reference/add_time_to_weather_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a time component to input — add_time_to_weather_data","text":"drivers time component, one added, provided components doy hour. (time values equal doy values plus fractional portion day represented hour values.) Otherwise drivers returned .","code":""},{"path":"/reference/add_time_to_weather_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add a time component to input — add_time_to_weather_data","text":"Preconditions: drivers list, values vectors equal length.  Moreover, already contains time component, contain either doy hour component unless contains values mutually consistent.  Furthermore, time represented (doy, hour), given, time, given, increase vector row index increases.","code":""},{"path":"/reference/annualDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscanthus dry biomass data. — annualDB","title":"Miscanthus dry biomass data. — annualDB","text":"first column thermal time. second, third, fourth, fifth     columns miscanthus stem, leaf, root, rhizome dry biomass Mg     ha-1 (root missing). sixth column leaf area index.     annualDB.c version altered root biomass     missing LAI smaller. purpose last modification     testing functions.","code":""},{"path":"/reference/annualDB.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miscanthus dry biomass data. — annualDB","text":"Data frame dimensions 5 6.","code":""},{"path":"/reference/annualDB.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscanthus dry biomass data. — annualDB","text":"Clive Beale Stephen Long. 1997. Seasonal dynamics nutrient     accumulation partitioning perennial C4 grasses Miscanthus x     giganteus Spartina cynosuroides. Biomass Bioenergy 12 (6): 419--428.","code":""},{"path":"/reference/catm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Global annual mean atmopspheric CO2 levels — catm_data","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"Multiple years globally averaged annual mean atmospheric CO2 levels   uncertainties. data included BioCro package users can reproduce   calculations BioCro II paper (citation forthcoming)   exploratory purposes; likely BioCro studies require   different data sets, attempt made exhaustive.","code":""},{"path":"/reference/catm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"","code":"catm_data"},{"path":"/reference/catm_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"Data frame 3 columns 41 rows: year: year Catm: CO2 concentration (micromol / mol) unc: uncertainty associated CO2 concentration           (micromol / mol)","code":""},{"path":"/reference/catm_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"Data obtained National Oceanic Atmospheric Administration's   Global Monitoring Laboratory (https://gml.noaa.gov/ccgg/trends/data.html)   04-13-2021. exact link used   https://gml.noaa.gov/webdata/ccgg/trends/co2/co2_annmean_gl.txt. Alternatively, data can accessed   https://gml.noaa.gov/ccgg/trends/gl_data.html clicking link   Globally averaged marine surface annual mean data (CSV). data provided convenience BioCro users; please visit   NOAA GML webpage guidelines regarding use data   intending include publication.","code":""},{"path":"/reference/cmi_soybean_weather_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"Champaign, IL weather data specified hourly intervals CST time zone   years 2002, 2004, 2005, 2006. columns correspond typical   inputs required BioCro simulations, addition   day_length, specifically required soybean simulations.   Although quantity can calculated modules course   simulation, included weather data speed simulations.   time range restricted SoyFACE growing season used   year. weather data included BioCro package users can reproduce   calculations Soybean-BioCro paper (citation forthcoming)   exploratory purposes; likely BioCro studies require   different data sets, attempt made exhaustive.","code":""},{"path":"/reference/cmi_soybean_weather_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"","code":"## YYYY should be replaced with a 4-digit year from the available set of years, ## e.g. 2002 soybean_weatherYYYY"},{"path":"/reference/cmi_soybean_weather_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"4 data frames corresponding 4 years weather data, data   frame 2952 - 3384 rows 14 columns: year: year doy: day year hour: hour time_zone_offset: time zone offset relative UTC (hr) precip: preciptation rate (mm / hr) rh: ambient relative humidity (dimensionless) dw_solar: downwelling global solar radiation (J / m^2 / s) up_solar: upwelling global solar radiation (J / m^2 / s) netsolar: net global solar radiation (downwelling - upwelling)           (J / m^2 /s) solar: incoming photosynthetically active photon flux           density (PPFD) measured ground area basis including direct           diffuse sunlight light just outside crop canopy           (micromol / m^2 / s) temp: ambient air temperature (degrees Celsius) windspeed: wind speed ambient air just outside           canopy (m / s) zen: solar zenith angle (degrees) day_length: length daily photoperiod (hours)","code":""},{"path":"/reference/cmi_soybean_weather_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"Weather data obtained public SURFRAD WARM databases   processed according method described Soybean-BioCro paper   (accepted silico Plants). See paper full description   data processing. brief, columns data frames determined SURFRAD WARM   variables follows: precip: precip variable WARM data set rh: rh variable SURFRAD data set dw_solar: dw_solar variable SURFRAD data           set up_solar: uw_solar variable SURFRAD data           set netsolar: netsolar variable SURFRAD data           set solar: par variable SURFRAD data set;           values available, netsolar           up_solar variables used make estimate;           values also available, dw_solar variable used           make estimate temp: temp variable SURFRAD data set windspeed: windspd variable SURFRAD data           set zen: zen variable SURFRAD data set day_length: calculated solar using           oscillator-based circadian clock WARM data set includes daily values. Hourly values precipitation   derived daily totals assuming constant rate precipitation   throughout day. SURFRAD data set includes values 1 3 minute intervals. Hourly values   determined averaging hourly intervals, value hour   h average hour. values missing; missing   entries filled interpolating neighboring hours. create data frame, hourly values columns except   day_length extracted WARM SURFRAD data. , BioCro   used run circadian clock model determines photoperiod length.   (See page additional information clock model:   crop_specifications.) result calculation   appended weather data frame new column. time_zone_offset set constant value -6 since data   specified CST time zone (.e., UTC-6). Since value   quantity change, principle considered parameter   rather driver; however, included weather data   convenience.","code":""},{"path":"/reference/cmi_weather_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Champaign, IL weather data — cmi_weather_data","title":"Champaign, IL weather data — cmi_weather_data","text":"Multiple years Champaign, IL weather data specified hourly intervals   CST time zone. columns correspond typical inputs required   BioCro simulations. Note: values missing near start 1995 since   data available SURFRAD. weather data included BioCro package users can reproduce   calculations BioCro II paper (citation forthcoming) exploratory   purposes; likely BioCro studies require different data   sets, attempt made exhaustive.","code":""},{"path":"/reference/cmi_weather_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Champaign, IL weather data — cmi_weather_data","text":"","code":"## YYYY should be replaced with a 4-digit year from the available set of years, ## e.g. 2002 weatherYYYY"},{"path":"/reference/cmi_weather_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Champaign, IL weather data — cmi_weather_data","text":"26 data frames corresponding 26 years weather data (1995 - 2020),   data frame 8760 8784 rows (representing hourly time points) 9   columns: year: year doy: day year hour: hour time_zone_offset: time zone offset relative UTC (hr) precip: preciptation rate (mm / hr) rh: ambient relative humidity (dimensionless) solar: incoming photosynthetically active photon flux           density (PPFD) measured ground area basis including direct           diffuse sunlight light just outside crop canopy           (micromol / m^2 / s) temp: ambient air temperature (degrees Celsius) windspeed: wind speed ambient air just outside           canopy (m / s)","code":""},{"path":"/reference/cmi_weather_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Champaign, IL weather data — cmi_weather_data","text":"Weather data obtained public SURFRAD WARM databases   processed according method described BioCro II paper   (submitted). See paper full description data processing. brief, columns data frames determined SURFRAD WARM   variables follows: precip: precip variable WARM data set rh: rh variable SURFRAD data set solar: par variable SURFRAD data set;           values available, direct_n,           diffuse, zen variables used make estimate temp: temp variable SURFRAD data set windspeed: windspd variable SURFRAD data           set WARM data set includes daily values. Hourly values precipitation   derived daily totals assuming constant rate precipitation   throughout day. SURFRAD data set includes values 1 3 minute intervals. Hourly values   determined averaging hourly intervals, value hour   h average hour-long interval centered h.   values missing; missing entries filled via interpolation   procedure based assumption values hour sequential   days similar. time_zone_offset set constant value -6 since data   specified CST time zone (.e., UTC-6). Since value   quantity change, principle considered parameter   rather driver; however, included weather data   convenience.","code":""},{"path":"/reference/crop_specifications.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop specifications — crop_specifications","title":"Crop specifications — crop_specifications","text":"Sets initial values, parameters, direct modules, differential modules,   differential equation solvers can used (along included   weather data) run growth simulations several crops Champaign, IL.   crops, parameter module specifications   associated published papers: glycine_max (unpublished) manihot_esculenta (unpublished) miscanthus_x_giganteus sorghum (unpublished) soybean willow zea_mays (unpublished) soybean specifications intended used along   special soybean weather data (cmi_soybean_weather_data).   crops used weather data   (cmi_weather_data). Important note: specifications, values   photosynthetic parameters, remain location; others,   latitude longitude, need change simulating crop growth   different locations. Care must taken understand input quantity   attempting run simulations places.","code":""},{"path":"/reference/crop_specifications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crop specifications — crop_specifications","text":"","code":"## CROP should be replaced by the name of a valid crop, e.g. `soybean`. ## SPECIFICATION should be replaced by a specification type, e.g. `parameters`. CROP_SPECIFICATION"},{"path":"/reference/crop_specifications.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Crop specifications — crop_specifications","text":"crop associated initial values, parameters, direct modules,   differential modules, differential equation solvers. objects   prefixed name crop; example, soybean parameters   called soybean_parameters. general, specifications   following format: CROP_initial_values: list named elements specifying           initial values differential quantities crop CROP CROP_parameters: list named elements specifying values           parameters crop CROP CROP_direct_modules: list direct modules required crop           CROP; elements named facilitate swapping           different modules can fulfill role CROP_differential_modules: list differential modules           required crop CROP; elements named facilitate           swapping different modules can fulfill role CROP_ode_solver: list named elements specify type           solver use crop CROP, well additional           parameters determine behavior soybean model additional lists initial values, parameters, direct   modules, differential modules can used circadian clock   component. lists prefixed soybean_clock.","code":""},{"path":"/reference/crop_specifications.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Crop specifications — crop_specifications","text":"published crop models, see following papers: Miguez, F. E., Zhu, X., Humphries, S., Bollero, G. . & Long, S. P.           semimechanistic model predicting growth production           bioenergy crop Miscanthus x giganteus: description,           parameterization validation. GCB Bioenergy 1, 282-296 (2009). Miguez, F. E., Maughan, M., Bollero, G. . & Long, S. P.           Modeling spatial dynamic variation growth, yield,           yield stability bioenergy crops Miscanthus x giganteus           Panicum virgatum across conterminous United States.           GCB Bioenergy 4, 509-520 (2012). Wang, D. et al. physiological biophysical model coppice           willow (Salix spp.) production yields contiguous USA           current future climate scenarios.           Plant, Cell & Environment 38, 1850-1865 (2015). Matthews, M. et al. Soybean-BioCro: semi-mechanistic model           soybean growth. silico Plants (2021).","code":""},{"path":"/reference/dynamical_system.html","id":null,"dir":"Reference","previous_headings":"","what":"Validating dynamical system inputs — dynamical_system","title":"Validating dynamical system inputs — dynamical_system","text":"Utility function checking inputs run_biocro without running ","code":""},{"path":"/reference/dynamical_system.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validating dynamical system inputs — dynamical_system","text":"","code":"validate_dynamical_system_inputs(     initial_values = list(),     parameters = list(),     drivers,     direct_module_names = list(),     differential_module_names = list(),     verbose = TRUE )"},{"path":"/reference/dynamical_system.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validating dynamical system inputs — dynamical_system","text":"validate_dynamical_system_inputs accepts input arguments  run_biocro exceptions ode_solver (  required check validity dynamical system).","code":""},{"path":"/reference/dynamical_system.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validating dynamical system inputs — dynamical_system","text":"validate_system_inputs checks set parameters, drivers, modules,   initial values see can properly define dynamical system   can therefore used inputs run_biocro. Although   run_biocro function performs validity checks,   validate_system_inputs includes additional information, list   parameters whose values used inputs modules, since   principle parameters removed clarity.","code":""},{"path":"/reference/dynamical_system.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validating dynamical system inputs — dynamical_system","text":"boolean indicating whether inputs valid","code":""},{"path":[]},{"path":"/reference/dynamical_system.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validating dynamical system inputs — dynamical_system","text":"","code":"# Example 1: missing a parameter and an initial value validate_dynamical_system_inputs(   within(soybean_initial_values, rm(Leaf)),         # remove the initial `Leaf` value   within(soybean_parameters, rm(leaf_reflectance)), # remove `leaf_reflectance`   soybean_weather2002,   soybean_direct_modules,   soybean_differential_modules ) #>  #> Checking the validity of the system inputs: #>  #> [pass] No quantities were defined multiple times in the inputs #>  #> [fail] The following module inputs were not defined: #>  Leaf from the 'parameter_calculator' module #>  leaf_reflectance from the 'ten_layer_canopy_properties' module #>  Leaf from the 'senescence_logistic' module #>  Leaf from the 'partitioning_growth' module #>  #> [fail] The following differential module outputs were not part of the initial values: #>  Leaf from the 'senescence_logistic' module #>  Leaf from the 'partitioning_growth' module #>  #> [pass] There are no cyclic dependencies among the direct modules. #>  #> System inputs are not valid #>  #> Printing additional information about the system inputs: #>  #> The direct modules are in a suitable order for evaluation. #>  #> The following quantities were each required by at least one module: #>  Catm #>  DVI #>  Gs_min #>  Leaf #>  LeafN #>  LeafN_0 #>  O2 #>  Rd #>  Rhizome #>  Rmax_emrV0 #>  Root #>  Sp_thermal_time_decay #>  Stem #>  StomataWS #>  TTc #>  TTemr_threshold #>  Tbase_emr #>  Tmax_R0R1 #>  Tmax_R1R7 #>  Tmax_emrV0 #>  Tmin_R0R1 #>  Tmin_R1R7 #>  Tmin_emrV0 #>  Topt_R0R1 #>  Topt_R1R7 #>  Topt_emrV0 #>  absorptivity_par #>  alpha1 #>  alphaLeaf #>  alphaRoot #>  alphaSeneLeaf #>  alphaSeneRhizome #>  alphaSeneRoot #>  alphaSeneStem #>  alphaStem #>  alphab1 #>  atmospheric_pressure #>  atmospheric_scattering #>  atmospheric_transmittance #>  average_absorbed_shortwave_layer_0 #>  average_absorbed_shortwave_layer_1 #>  average_absorbed_shortwave_layer_2 #>  average_absorbed_shortwave_layer_3 #>  average_absorbed_shortwave_layer_4 #>  average_absorbed_shortwave_layer_5 #>  average_absorbed_shortwave_layer_6 #>  average_absorbed_shortwave_layer_7 #>  average_absorbed_shortwave_layer_8 #>  average_absorbed_shortwave_layer_9 #>  b0 #>  b1 #>  betaLeaf #>  betaRoot #>  betaSeneLeaf #>  betaSeneRhizome #>  betaSeneRoot #>  betaSeneStem #>  betaStem #>  canopy_assimilation_rate #>  canopy_transpiration_rate #>  chil #>  cosine_zenith_angle #>  cws1 #>  cws2 #>  day_length #>  development_rate_per_hour #>  electrons_per_carboxylation #>  electrons_per_oxygenation #>  growth_respiration_fraction #>  height_layer_0 #>  height_layer_1 #>  height_layer_2 #>  height_layer_3 #>  height_layer_4 #>  height_layer_5 #>  height_layer_6 #>  height_layer_7 #>  height_layer_8 #>  height_layer_9 #>  heightf #>  hydrDist #>  iSp #>  irradiance_diffuse_fraction #>  irradiance_direct_fraction #>  jmax #>  kGrain #>  kLeaf #>  kRhizome #>  kRhizome_emr #>  kRoot #>  kSeneLeaf #>  kSeneRhizome #>  kSeneRoot #>  kSeneStem #>  kStem #>  kd #>  kpLN #>  lai #>  lat #>  leaf_reflectance #>  leaf_transmittance #>  lnfun #>  longitude #>  maturity_group #>  minimum_gbw #>  mrc1 #>  mrc2 #>  net_assimilation_rate_grain #>  net_assimilation_rate_leaf #>  net_assimilation_rate_rhizome #>  net_assimilation_rate_root #>  net_assimilation_rate_stem #>  par_energy_content #>  par_energy_fraction #>  par_incident_diffuse #>  par_incident_direct #>  phi1 #>  phi2 #>  precip #>  rateSeneLeaf #>  rateSeneRhizome #>  rateSeneRoot #>  rateSeneStem #>  remobilization_fraction #>  retrans #>  retrans_rhizome #>  rfl #>  rh #>  rh_layer_0 #>  rh_layer_1 #>  rh_layer_2 #>  rh_layer_3 #>  rh_layer_4 #>  rh_layer_5 #>  rh_layer_6 #>  rh_layer_7 #>  rh_layer_8 #>  rh_layer_9 #>  rsdf #>  rsec #>  shaded_Assim_layer_0 #>  shaded_Assim_layer_1 #>  shaded_Assim_layer_2 #>  shaded_Assim_layer_3 #>  shaded_Assim_layer_4 #>  shaded_Assim_layer_5 #>  shaded_Assim_layer_6 #>  shaded_Assim_layer_7 #>  shaded_Assim_layer_8 #>  shaded_Assim_layer_9 #>  shaded_GrossAssim_layer_0 #>  shaded_GrossAssim_layer_1 #>  shaded_GrossAssim_layer_2 #>  shaded_GrossAssim_layer_3 #>  shaded_GrossAssim_layer_4 #>  shaded_GrossAssim_layer_5 #>  shaded_GrossAssim_layer_6 #>  shaded_GrossAssim_layer_7 #>  shaded_GrossAssim_layer_8 #>  shaded_GrossAssim_layer_9 #>  shaded_Gs_layer_0 #>  shaded_Gs_layer_1 #>  shaded_Gs_layer_2 #>  shaded_Gs_layer_3 #>  shaded_Gs_layer_4 #>  shaded_Gs_layer_5 #>  shaded_Gs_layer_6 #>  shaded_Gs_layer_7 #>  shaded_Gs_layer_8 #>  shaded_Gs_layer_9 #>  shaded_TransR_layer_0 #>  shaded_TransR_layer_1 #>  shaded_TransR_layer_2 #>  shaded_TransR_layer_3 #>  shaded_TransR_layer_4 #>  shaded_TransR_layer_5 #>  shaded_TransR_layer_6 #>  shaded_TransR_layer_7 #>  shaded_TransR_layer_8 #>  shaded_TransR_layer_9 #>  shaded_fraction_layer_0 #>  shaded_fraction_layer_1 #>  shaded_fraction_layer_2 #>  shaded_fraction_layer_3 #>  shaded_fraction_layer_4 #>  shaded_fraction_layer_5 #>  shaded_fraction_layer_6 #>  shaded_fraction_layer_7 #>  shaded_fraction_layer_8 #>  shaded_fraction_layer_9 #>  shaded_incident_ppfd_layer_0 #>  shaded_incident_ppfd_layer_1 #>  shaded_incident_ppfd_layer_2 #>  shaded_incident_ppfd_layer_3 #>  shaded_incident_ppfd_layer_4 #>  shaded_incident_ppfd_layer_5 #>  shaded_incident_ppfd_layer_6 #>  shaded_incident_ppfd_layer_7 #>  shaded_incident_ppfd_layer_8 #>  shaded_incident_ppfd_layer_9 #>  soil_air_entry #>  soil_b_coefficient #>  soil_clod_size #>  soil_depth1 #>  soil_depth2 #>  soil_depth3 #>  soil_field_capacity #>  soil_reflectance #>  soil_sand_content #>  soil_saturated_conductivity #>  soil_saturation_capacity #>  soil_transmission #>  soil_type_indicator #>  soil_water_content #>  soil_wilting_point #>  solar #>  sowing_time #>  specific_heat_of_air #>  sunlit_Assim_layer_0 #>  sunlit_Assim_layer_1 #>  sunlit_Assim_layer_2 #>  sunlit_Assim_layer_3 #>  sunlit_Assim_layer_4 #>  sunlit_Assim_layer_5 #>  sunlit_Assim_layer_6 #>  sunlit_Assim_layer_7 #>  sunlit_Assim_layer_8 #>  sunlit_Assim_layer_9 #>  sunlit_GrossAssim_layer_0 #>  sunlit_GrossAssim_layer_1 #>  sunlit_GrossAssim_layer_2 #>  sunlit_GrossAssim_layer_3 #>  sunlit_GrossAssim_layer_4 #>  sunlit_GrossAssim_layer_5 #>  sunlit_GrossAssim_layer_6 #>  sunlit_GrossAssim_layer_7 #>  sunlit_GrossAssim_layer_8 #>  sunlit_GrossAssim_layer_9 #>  sunlit_Gs_layer_0 #>  sunlit_Gs_layer_1 #>  sunlit_Gs_layer_2 #>  sunlit_Gs_layer_3 #>  sunlit_Gs_layer_4 #>  sunlit_Gs_layer_5 #>  sunlit_Gs_layer_6 #>  sunlit_Gs_layer_7 #>  sunlit_Gs_layer_8 #>  sunlit_Gs_layer_9 #>  sunlit_TransR_layer_0 #>  sunlit_TransR_layer_1 #>  sunlit_TransR_layer_2 #>  sunlit_TransR_layer_3 #>  sunlit_TransR_layer_4 #>  sunlit_TransR_layer_5 #>  sunlit_TransR_layer_6 #>  sunlit_TransR_layer_7 #>  sunlit_TransR_layer_8 #>  sunlit_TransR_layer_9 #>  sunlit_fraction_layer_0 #>  sunlit_fraction_layer_1 #>  sunlit_fraction_layer_2 #>  sunlit_fraction_layer_3 #>  sunlit_fraction_layer_4 #>  sunlit_fraction_layer_5 #>  sunlit_fraction_layer_6 #>  sunlit_fraction_layer_7 #>  sunlit_fraction_layer_8 #>  sunlit_fraction_layer_9 #>  sunlit_incident_ppfd_layer_0 #>  sunlit_incident_ppfd_layer_1 #>  sunlit_incident_ppfd_layer_2 #>  sunlit_incident_ppfd_layer_3 #>  sunlit_incident_ppfd_layer_4 #>  sunlit_incident_ppfd_layer_5 #>  sunlit_incident_ppfd_layer_6 #>  sunlit_incident_ppfd_layer_7 #>  sunlit_incident_ppfd_layer_8 #>  sunlit_incident_ppfd_layer_9 #>  tbase #>  temp #>  theta #>  time #>  time_zone_offset #>  tpu_rate_max #>  vmax1 #>  vmax_n_intercept #>  water_stress_approach #>  windspeed #>  windspeed_height #>  windspeed_layer_0 #>  windspeed_layer_1 #>  windspeed_layer_2 #>  windspeed_layer_3 #>  windspeed_layer_4 #>  windspeed_layer_5 #>  windspeed_layer_6 #>  windspeed_layer_7 #>  windspeed_layer_8 #>  windspeed_layer_9 #>  wsFun #>  year #>  #> Each parameter was used as an input to one or more modules #>  #> The following drivers were not used as inputs to any module: #>  dw_solar #>  netsolar #>  up_solar #>  zen #> You may want to consider removing them for clarity #>  #> All quantities in the initial values have associated derivatives #>  #> Derivatives for the following quantities are each determined by more than one module: #>  Grain #>  Leaf #>  Rhizome #>  Root #>  Stem #>  #> No direct modules require a fixed step size Euler ode_solver #>  #> No differential modules require a fixed step size Euler ode_solver #>  #> All modules in the direct module list are direct modules #>  #> All modules in the differential module list are differential modules #>  #> [1] FALSE  # Example 2: a valid set of input arguments validate_dynamical_system_inputs(   soybean_initial_values,   soybean_parameters,   soybean_weather2002,   soybean_direct_modules,   soybean_differential_modules ) #>  #> Checking the validity of the system inputs: #>  #> [pass] No quantities were defined multiple times in the inputs #>  #> [pass] All module inputs were properly defined #>  #> [pass] All differential module outputs were included in the initial values #>  #> [pass] There are no cyclic dependencies among the direct modules. #>  #> System inputs are valid #>  #> Printing additional information about the system inputs: #>  #> The direct modules are in a suitable order for evaluation. #>  #> The following quantities were each required by at least one module: #>  Catm #>  DVI #>  Gs_min #>  Leaf #>  LeafN #>  LeafN_0 #>  O2 #>  Rd #>  Rhizome #>  Rmax_emrV0 #>  Root #>  Sp_thermal_time_decay #>  Stem #>  StomataWS #>  TTc #>  TTemr_threshold #>  Tbase_emr #>  Tmax_R0R1 #>  Tmax_R1R7 #>  Tmax_emrV0 #>  Tmin_R0R1 #>  Tmin_R1R7 #>  Tmin_emrV0 #>  Topt_R0R1 #>  Topt_R1R7 #>  Topt_emrV0 #>  absorptivity_par #>  alpha1 #>  alphaLeaf #>  alphaRoot #>  alphaSeneLeaf #>  alphaSeneRhizome #>  alphaSeneRoot #>  alphaSeneStem #>  alphaStem #>  alphab1 #>  atmospheric_pressure #>  atmospheric_scattering #>  atmospheric_transmittance #>  average_absorbed_shortwave_layer_0 #>  average_absorbed_shortwave_layer_1 #>  average_absorbed_shortwave_layer_2 #>  average_absorbed_shortwave_layer_3 #>  average_absorbed_shortwave_layer_4 #>  average_absorbed_shortwave_layer_5 #>  average_absorbed_shortwave_layer_6 #>  average_absorbed_shortwave_layer_7 #>  average_absorbed_shortwave_layer_8 #>  average_absorbed_shortwave_layer_9 #>  b0 #>  b1 #>  betaLeaf #>  betaRoot #>  betaSeneLeaf #>  betaSeneRhizome #>  betaSeneRoot #>  betaSeneStem #>  betaStem #>  canopy_assimilation_rate #>  canopy_transpiration_rate #>  chil #>  cosine_zenith_angle #>  cws1 #>  cws2 #>  day_length #>  development_rate_per_hour #>  electrons_per_carboxylation #>  electrons_per_oxygenation #>  growth_respiration_fraction #>  height_layer_0 #>  height_layer_1 #>  height_layer_2 #>  height_layer_3 #>  height_layer_4 #>  height_layer_5 #>  height_layer_6 #>  height_layer_7 #>  height_layer_8 #>  height_layer_9 #>  heightf #>  hydrDist #>  iSp #>  irradiance_diffuse_fraction #>  irradiance_direct_fraction #>  jmax #>  kGrain #>  kLeaf #>  kRhizome #>  kRhizome_emr #>  kRoot #>  kSeneLeaf #>  kSeneRhizome #>  kSeneRoot #>  kSeneStem #>  kStem #>  kd #>  kpLN #>  lai #>  lat #>  leaf_reflectance #>  leaf_transmittance #>  lnfun #>  longitude #>  maturity_group #>  minimum_gbw #>  mrc1 #>  mrc2 #>  net_assimilation_rate_grain #>  net_assimilation_rate_leaf #>  net_assimilation_rate_rhizome #>  net_assimilation_rate_root #>  net_assimilation_rate_stem #>  par_energy_content #>  par_energy_fraction #>  par_incident_diffuse #>  par_incident_direct #>  phi1 #>  phi2 #>  precip #>  rateSeneLeaf #>  rateSeneRhizome #>  rateSeneRoot #>  rateSeneStem #>  remobilization_fraction #>  retrans #>  retrans_rhizome #>  rfl #>  rh #>  rh_layer_0 #>  rh_layer_1 #>  rh_layer_2 #>  rh_layer_3 #>  rh_layer_4 #>  rh_layer_5 #>  rh_layer_6 #>  rh_layer_7 #>  rh_layer_8 #>  rh_layer_9 #>  rsdf #>  rsec #>  shaded_Assim_layer_0 #>  shaded_Assim_layer_1 #>  shaded_Assim_layer_2 #>  shaded_Assim_layer_3 #>  shaded_Assim_layer_4 #>  shaded_Assim_layer_5 #>  shaded_Assim_layer_6 #>  shaded_Assim_layer_7 #>  shaded_Assim_layer_8 #>  shaded_Assim_layer_9 #>  shaded_GrossAssim_layer_0 #>  shaded_GrossAssim_layer_1 #>  shaded_GrossAssim_layer_2 #>  shaded_GrossAssim_layer_3 #>  shaded_GrossAssim_layer_4 #>  shaded_GrossAssim_layer_5 #>  shaded_GrossAssim_layer_6 #>  shaded_GrossAssim_layer_7 #>  shaded_GrossAssim_layer_8 #>  shaded_GrossAssim_layer_9 #>  shaded_Gs_layer_0 #>  shaded_Gs_layer_1 #>  shaded_Gs_layer_2 #>  shaded_Gs_layer_3 #>  shaded_Gs_layer_4 #>  shaded_Gs_layer_5 #>  shaded_Gs_layer_6 #>  shaded_Gs_layer_7 #>  shaded_Gs_layer_8 #>  shaded_Gs_layer_9 #>  shaded_TransR_layer_0 #>  shaded_TransR_layer_1 #>  shaded_TransR_layer_2 #>  shaded_TransR_layer_3 #>  shaded_TransR_layer_4 #>  shaded_TransR_layer_5 #>  shaded_TransR_layer_6 #>  shaded_TransR_layer_7 #>  shaded_TransR_layer_8 #>  shaded_TransR_layer_9 #>  shaded_fraction_layer_0 #>  shaded_fraction_layer_1 #>  shaded_fraction_layer_2 #>  shaded_fraction_layer_3 #>  shaded_fraction_layer_4 #>  shaded_fraction_layer_5 #>  shaded_fraction_layer_6 #>  shaded_fraction_layer_7 #>  shaded_fraction_layer_8 #>  shaded_fraction_layer_9 #>  shaded_incident_ppfd_layer_0 #>  shaded_incident_ppfd_layer_1 #>  shaded_incident_ppfd_layer_2 #>  shaded_incident_ppfd_layer_3 #>  shaded_incident_ppfd_layer_4 #>  shaded_incident_ppfd_layer_5 #>  shaded_incident_ppfd_layer_6 #>  shaded_incident_ppfd_layer_7 #>  shaded_incident_ppfd_layer_8 #>  shaded_incident_ppfd_layer_9 #>  soil_air_entry #>  soil_b_coefficient #>  soil_clod_size #>  soil_depth1 #>  soil_depth2 #>  soil_depth3 #>  soil_field_capacity #>  soil_reflectance #>  soil_sand_content #>  soil_saturated_conductivity #>  soil_saturation_capacity #>  soil_transmission #>  soil_type_indicator #>  soil_water_content #>  soil_wilting_point #>  solar #>  sowing_time #>  specific_heat_of_air #>  sunlit_Assim_layer_0 #>  sunlit_Assim_layer_1 #>  sunlit_Assim_layer_2 #>  sunlit_Assim_layer_3 #>  sunlit_Assim_layer_4 #>  sunlit_Assim_layer_5 #>  sunlit_Assim_layer_6 #>  sunlit_Assim_layer_7 #>  sunlit_Assim_layer_8 #>  sunlit_Assim_layer_9 #>  sunlit_GrossAssim_layer_0 #>  sunlit_GrossAssim_layer_1 #>  sunlit_GrossAssim_layer_2 #>  sunlit_GrossAssim_layer_3 #>  sunlit_GrossAssim_layer_4 #>  sunlit_GrossAssim_layer_5 #>  sunlit_GrossAssim_layer_6 #>  sunlit_GrossAssim_layer_7 #>  sunlit_GrossAssim_layer_8 #>  sunlit_GrossAssim_layer_9 #>  sunlit_Gs_layer_0 #>  sunlit_Gs_layer_1 #>  sunlit_Gs_layer_2 #>  sunlit_Gs_layer_3 #>  sunlit_Gs_layer_4 #>  sunlit_Gs_layer_5 #>  sunlit_Gs_layer_6 #>  sunlit_Gs_layer_7 #>  sunlit_Gs_layer_8 #>  sunlit_Gs_layer_9 #>  sunlit_TransR_layer_0 #>  sunlit_TransR_layer_1 #>  sunlit_TransR_layer_2 #>  sunlit_TransR_layer_3 #>  sunlit_TransR_layer_4 #>  sunlit_TransR_layer_5 #>  sunlit_TransR_layer_6 #>  sunlit_TransR_layer_7 #>  sunlit_TransR_layer_8 #>  sunlit_TransR_layer_9 #>  sunlit_fraction_layer_0 #>  sunlit_fraction_layer_1 #>  sunlit_fraction_layer_2 #>  sunlit_fraction_layer_3 #>  sunlit_fraction_layer_4 #>  sunlit_fraction_layer_5 #>  sunlit_fraction_layer_6 #>  sunlit_fraction_layer_7 #>  sunlit_fraction_layer_8 #>  sunlit_fraction_layer_9 #>  sunlit_incident_ppfd_layer_0 #>  sunlit_incident_ppfd_layer_1 #>  sunlit_incident_ppfd_layer_2 #>  sunlit_incident_ppfd_layer_3 #>  sunlit_incident_ppfd_layer_4 #>  sunlit_incident_ppfd_layer_5 #>  sunlit_incident_ppfd_layer_6 #>  sunlit_incident_ppfd_layer_7 #>  sunlit_incident_ppfd_layer_8 #>  sunlit_incident_ppfd_layer_9 #>  tbase #>  temp #>  theta #>  time #>  time_zone_offset #>  tpu_rate_max #>  vmax1 #>  vmax_n_intercept #>  water_stress_approach #>  windspeed #>  windspeed_height #>  windspeed_layer_0 #>  windspeed_layer_1 #>  windspeed_layer_2 #>  windspeed_layer_3 #>  windspeed_layer_4 #>  windspeed_layer_5 #>  windspeed_layer_6 #>  windspeed_layer_7 #>  windspeed_layer_8 #>  windspeed_layer_9 #>  wsFun #>  year #>  #> Each parameter was used as an input to one or more modules #>  #> The following drivers were not used as inputs to any module: #>  dw_solar #>  netsolar #>  up_solar #>  zen #> You may want to consider removing them for clarity #>  #> All quantities in the initial values have associated derivatives #>  #> Derivatives for the following quantities are each determined by more than one module: #>  Grain #>  Leaf #>  Rhizome #>  Root #>  Stem #>  #> No direct modules require a fixed step size Euler ode_solver #>  #> No differential modules require a fixed step size Euler ode_solver #>  #> All modules in the direct module list are direct modules #>  #> All modules in the differential module list are differential modules #>  #> [1] TRUE"},{"path":"/reference/get_all.html","id":null,"dir":"Reference","previous_headings":"","what":"BioCro Functions for Getting Modules, Quantities, and Solvers — get_all","title":"BioCro Functions for Getting Modules, Quantities, and Solvers — get_all","text":"get_all_modules returns names available BioCro modules. get_all_quantities returns information quantities used     inputs outputs BioCro modules. get_all_ode_solvers returns names available ordinary     differential equation (ODE) solvers available BioCro.","code":""},{"path":"/reference/get_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BioCro Functions for Getting Modules, Quantities, and Solvers — get_all","text":"","code":"get_all_modules()    get_all_quantities()    get_all_ode_solvers()"},{"path":"/reference/get_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BioCro Functions for Getting Modules, Quantities, and Solvers — get_all","text":"None","code":""},{"path":"/reference/get_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BioCro Functions for Getting Modules, Quantities, and Solvers — get_all","text":"\"get_all\" functions return modules, quantities, ODE solvers   available within BioCro package","code":""},{"path":"/reference/get_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BioCro Functions for Getting Modules, Quantities, and Solvers — get_all","text":"get_all_modules character vector module names get_all_quantities data frame three columns:     quantity_type (input output), quantity_name,     module_name. quantity appear multiple times used     input output, used multiple modules. get_all_ode_solvers character vector ODE solver names","code":""},{"path":"/reference/get_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BioCro Functions for Getting Modules, Quantities, and Solvers — get_all","text":"","code":"# Example 1: getting a list of all unique quantities (which can be useful when # writing a new module that is intended to work along with pre-existing modules) all_quantities <- get_all_quantities() all_quantity_names <- all_quantities$quantity_name all_unique_quantities <- unique(all_quantity_names) all_unique_quantities <- sort(all_unique_quantities)  # Example 2: getting a list of all modules that have \"ci\" as an input or output, # using `tolower()` to account for any possible variations in capitalization all_quantities <- get_all_quantities() ci_modules <- subset(all_quantities, tolower(quantity_name) == \"ci\")"},{"path":"/reference/lightME.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates the light macro environment — lightME","title":"Simulates the light macro environment — lightME","text":"Simulates light macro environment based latitude, day year.     coefficients can adjusted. Note: type special-purpose     function now deprecated, lightME included BioCro     namespace. reason, must accessed via BioCro:::lightME.","code":""},{"path":"/reference/lightME.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates the light macro environment — lightME","text":"","code":"lightME(lat = 40, DOY = 190, t.d = 12, t.sn = 12, atm.P = 1e+05, alpha = 0.85)"},{"path":"/reference/lightME.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates the light macro environment — lightME","text":"lat latitude, default 40 (Urbana, IL, U.S.). DOY day year ([1, 365]), default 190. t.d time day hours ([0, 23]), default 12. t.sn time solar noon, default 12. atm.P atmospheric pressure, default 1e5 (kPa). alpha atmospheric transmittance, default 0.85.","code":""},{"path":"/reference/lightME.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates the light macro environment — lightME","text":"list structure components:  \".dir\"Direct radiation (micromoles m^-2 s-1) \".diff\"Indirect (diffuse) radiation (micromoles m^-2 s-1) \"cos.th\"cosine \\(\\theta\\), solar zenith angle. \"propIdir\"proportion direct radiation. \"propIdiff\"proportion indirect (diffuse) radiation.","code":""},{"path":"/reference/lightME.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulates the light macro environment — lightME","text":"equations used can found     http://www.life.illinois.edu/plantbio/wimovac/newpage9.htm     original source Monteith, 1991.","code":""},{"path":"/reference/lightME.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates the light macro environment — lightME","text":"","code":"## Direct and diffuse radiation for DOY 190 and hours 0 to 23  res <- BioCro:::lightME(t.d=0:23)  lattice::xyplot(   I.dir + I.diff ~ 0:23,   data = res,   type = 'o',   xlab = 'hour',   ylab = 'Irradiance' )   lattice::xyplot(   propIdir + propIdiff ~ 0:23,   data = res,   type='o',   xlab='hour',   ylab='Irradiance proportion' )   plot(acos(BioCro:::lightME(lat = 42, t.d = 0:23)$cos.th) * 180 / pi)"},{"path":"/reference/module_wrapper_pointer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create instances of modules — module_wrapper_pointer","title":"Create instances of modules — module_wrapper_pointer","text":"Creates pointers module wrapper objects","code":""},{"path":"/reference/module_wrapper_pointer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create instances of modules — module_wrapper_pointer","text":"","code":"module_wrapper_pointer(module_names)"},{"path":"/reference/module_wrapper_pointer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create instances of modules — module_wrapper_pointer","text":"module_names vector module names","code":""},{"path":"/reference/module_wrapper_pointer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create instances of modules — module_wrapper_pointer","text":"function used internally several BioCro functions,   purpose create instances module wrapper pointers using BioCro's   module library return pointers wrappers. turn, module wrappers   can used obtain information module's inputs, outputs,   properties, can also used create module instance. See   Also section contains list functions directly rely   module_wrapper_pointer. R documentation externalptr objects sparse,   information can found   .","code":""},{"path":"/reference/module_wrapper_pointer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create instances of modules — module_wrapper_pointer","text":"vector R externalptr objects point  module_wrapper_base C++ object","code":""},{"path":[]},{"path":"/reference/module_wrapper_pointer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create instances of modules — module_wrapper_pointer","text":"","code":"# Example: creating a vector of pointers to several module wrappers representing # three options for thermal time calculations module_pointers <- module_wrapper_pointer(c(   'thermal_time_linear',   'thermal_time_bilinear',   'thermal_time_trilinear' ))"},{"path":"/reference/modules.html","id":null,"dir":"Reference","previous_headings":"","what":"BioCro module functions — modules","title":"BioCro module functions — modules","text":"module_info returns essential information BioCro module. evaluate_module runs BioCro module using list input quantity   values. quantity_list_from_names initializes list named numeric elements   set names. module_response_curve runs BioCro module repeatedly different   input quantity values produce response curve.","code":""},{"path":"/reference/modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BioCro module functions — modules","text":"","code":"module_info(module_name, verbose = TRUE)    evaluate_module(module_name, input_quantities)    quantity_list_from_names(quantity_names)    module_response_curve(module_name, fixed_quantities, varying_quantities)"},{"path":"/reference/modules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BioCro module functions — modules","text":"module_name string representing name one BioCro module verbose boolean indicating whether print information R console input_quantities list named numeric elements representing input quantities required     module; extraneous quantities ignored module quantity_names vector strings fixed_quantities list named numeric elements representing input quantities required     module whose values considered constant;     extraneous quantities ignored module varying_quantities data frame column represents input quantity required     module whose value varies across response curve","code":""},{"path":"/reference/modules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BioCro module functions — modules","text":"providing avenues retrieving information module evaluating   module's equations, module_info evaluate_module   functions form main interface individual BioCro modules within R.   quantity_list_from_names function convenience function   preparing suitable quantity lists pass evaluate_module. module_response_curve function provides convenient way   calculate module response curve. , user must specify module   use, values fixed input quantities (input_quantities),   sequence values quantities vary across response curve   (varying_quantities). returned data frame includes   information required reproduce curve: module name,   inputs (including ones constant values), outputs. Note:   one quantity q input output module, input   value stored q column returned data frame   output value stored q.1 column; renaming   performed automatically make.unique function.","code":""},{"path":"/reference/modules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BioCro module functions — modules","text":"module_info invisible list several named elements containing     essential information module: module_name: module's name inputs: character vector module's inputs outputs: character vector module's outputs type: module's type represented string (either             'differential' 'direct') euler_requirement: Indicates whether module requires             fixed-step Euler ODE solver used BioCro simulation creation_error_message: Describes errors occurred             creating instance module  evaluate_module list named numeric elements representing values module's     outputs calculated input_quantities according     module's equations. quantity_list_from_names list named numeric elements, names set     quantity_names value initialized 1. module_response_curve data frame first column name module produced     response curve remaining columns module's input     output quantities. row corresponds row     varying_quantities.","code":""},{"path":[]},{"path":"/reference/modules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BioCro module functions — modules","text":"","code":"# Example 1: printing information about the 'c3_assimilation' module to the R # console module_info('c3_assimilation') #>  #>  #> Module name: #>   c3_assimilation #>  #> Module input quantities: #>   Qp #>   Tleaf #>   rh #>   vmax1 #>   jmax #>   tpu_rate_max #>   Rd #>   b0 #>   b1 #>   Gs_min #>   Catm #>   atmospheric_pressure #>   O2 #>   theta #>   StomataWS #>   water_stress_approach #>   electrons_per_carboxylation #>   electrons_per_oxygenation #>  #> Module output quantities: #>   Assim #>   Gs #>   Ci #>   GrossAssim #>  #> Module type (differential or direct): #>   direct #>  #> Requires a fixed step size Euler ode_solver: #>   no #>   # Example 2: getting the inputs to the 'thermal_time_linear' module, generating # a default input list, and using it to run the module info <- module_info('thermal_time_linear', verbose = FALSE) inputs <- quantity_list_from_names(info$inputs) # All inputs will be set to 1 outputs <- evaluate_module('thermal_time_linear', inputs)  # Example 3: calculating the temperature response of light saturated net # assimilation at several values of relative humidity in the absence of water # stress using the 'c3_assimilation' module and soybean parameters. Here, the # leaf temperature and humidity values are independent of each other, so we use # the `expand.grid` function to form a data frame of all possible combinations # of their values. rc <- module_response_curve(   'c3_assimilation',   within(soybean_parameters, {Qp = 2000; StomataWS = 1}),   expand.grid(     Tleaf = seq(from = 0, to = 40, length.out = 201),     rh = c(0.2, 0.5, 0.8)   ) ) caption <- paste(   \"Response curves calculated with several RH\\nvalues and Q =\",   unique(rc$Qp),   \"micromol / m^2 / s\\nusing the\",   unique(rc$module_name),   \"module\" ) lattice::xyplot(   Assim ~ Tleaf,   group = rh,   data = rc,   auto = TRUE,   type = 'l',   main = caption )"},{"path":"/reference/obsBea.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscanthus assimilation field data — obsBea","title":"Miscanthus assimilation field data — obsBea","text":"Assimilation Miscanthus measured Beale, Bint, Long 1996.      first column observed net assimilation rate (micromoles m^-2 s^-1).     second column observed quantum flux (micromoles m^-2 s^-1).     third column temperature (degrees Celsius). Relative humidity     reported thus assumed 0.7.","code":""},{"path":"/reference/obsBea.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miscanthus assimilation field data — obsBea","text":"Data frame dimensions 27 4.","code":""},{"path":"/reference/obsBea.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscanthus assimilation field data — obsBea","text":"C. V. Beale, D. . Bint, S. P. Long. 1996. Leaf photosynthesis     C4-grass Miscanthus x giganteus, growing cool temperate climate     southern England. J. Exp. Bot. 47 (2): 267--273.","code":""},{"path":"/reference/obsBeaC.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete Miscanthus assimilation field data — obsBeaC","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"Assimilation stomatal conductance Miscanthus measured Beale, Bint, Long     1996.  (Missing data also included.)  first column     date, second hour. Columns 3 4 assimilation     stomatal conductance respectively.","code":""},{"path":"/reference/obsBeaC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"Data frame dimensions 35 6.","code":""},{"path":"/reference/obsBeaC.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"C. V. Beale, D. . Bint, S. P. Long. 1996. Leaf photosynthesis     C4-grass Miscanthus x giganteus, growing cool temperate climate     southern England. J. Exp. Bot. 47 (2): 267--273.","code":""},{"path":"/reference/obsBeaC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"third column observed net assimilation rate (micromoles m^-2 s^-1). fifth column observed quantum flux (micromoles m^-2 s^-1). sixth column temperature (degrees Celsius).","code":""},{"path":"/reference/obsNaid.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscanthus assimilation data — obsNaid","title":"Miscanthus assimilation data — obsNaid","text":"Assimilation Miscanthus measured Naidu et al. (2003). first     column observed net assimilation rate (micromoles m^-2 s^-1).     second column observed quantum flux (micromoles m^-2 s^-1).     third column temperature (degrees Celsius).     fourth column observed relative humidity proportion (e.g. 0.7).","code":""},{"path":"/reference/obsNaid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miscanthus assimilation data — obsNaid","text":"Data frame dimensions 16 4.","code":""},{"path":"/reference/obsNaid.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscanthus assimilation data — obsNaid","text":"S. L. Naidu, S. P. Moose, . K. AL-Shoaibi, C. . Raines, S. P.     Long.  2003. Cold Tolerance C4 photosynthesis Miscanthus x giganteus:     Adaptation Amounts Sequence C4 Photosynthetic Enzymes.     Plant Physiol. 132 (3): 1688--1697.","code":""},{"path":"/reference/partial_application.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience Functions for Partial Application — partial_application","title":"Convenience Functions for Partial Application — partial_application","text":"Convenience functions using partial application BioCro","code":""},{"path":"/reference/partial_application.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience Functions for Partial Application — partial_application","text":"","code":"partial_run_biocro(     initial_values = list(),     parameters = list(),     drivers,     direct_module_names = list(),     differential_module_names = list(),     ode_solver = default_ode_solver,     arg_names,     verbose = FALSE )  partial_evaluate_module(module_name, input_quantities, arg_names)"},{"path":"/reference/partial_application.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience Functions for Partial Application — partial_application","text":"partial_run_biocro accepts input arguments  run_biocro addition arg_names,   vector strings representing subset named elements included   initial_values, parameters, drivers.  partial_evaluate_module accepts input arguments  evaluate_module addition arg_names,   vector strings representing subset named elements   included input_quantities.","code":""},{"path":"/reference/partial_application.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convenience Functions for Partial Application — partial_application","text":"Partial application technique fixing input   arguments function, producing new function fewer inputs.   context BioCro, partial application can often useful varying   parameters, initial values, drivers performing optimization   sensitivity analysis.","code":""},{"path":"/reference/partial_application.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience Functions for Partial Application — partial_application","text":"partial_run_biocro function calls run_biocro inputs     (except specified arg_names) set default values.     input argument new function numerical vector specifying     values quantities arg_names. vector, values     must supplied order arg_names, arguments     corresponding drivers must vectors length     drivers. partial_evaluate_module function calls evaluate_module input     quantities (except specified arg_names) set default     values. input argument new function numerical vector     specifying values quantities arg_names. vector,     values must supplied order arg_names.     return value new function list two elements (inputs     outputs), list named numeric elements     representing module's input output values. (Note differs     output evaluate_module, returns outputs.)","code":""},{"path":[]},{"path":"/reference/partial_application.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience Functions for Partial Application — partial_application","text":"","code":"# Example 1: varying the thermal time values at which senescence starts for # different organs in a simulation; here we set them to the following values # instead of the defaults: #  - seneLeaf: 2000 degrees C * day #  - seneStem: 2100 degrees C * day #  - seneRoot: 2200 degrees C * day #  - seneRhizome: 2300 degrees C * day senescence_simulation <- partial_run_biocro(     miscanthus_x_giganteus_initial_values,     miscanthus_x_giganteus_parameters,     get_growing_season_climate(weather2005),     miscanthus_x_giganteus_direct_modules,     miscanthus_x_giganteus_differential_modules,     miscanthus_x_giganteus_ode_solver,     c('seneLeaf', 'seneStem', 'seneRoot', 'seneRhizome') ) senescence_result <- senescence_simulation(c(2000, 2100, 2200, 2300))  # Example 2: a crude method for simulating the effects of climate change; here we # increase the atmospheric CO2 concentration to 500 ppm and the temperature by # 2 degrees C relative to 2002 temperatures. The two commands below are # equivalent, so `hot_result_1` is identical to `hot_result_2`. temperature_simulation <- partial_run_biocro(   soybean_initial_values,   soybean_parameters,   soybean_weather2002,   soybean_direct_modules,   soybean_differential_modules,   soybean_ode_solver,   c(\"Catm\", \"temp\") ) hot_result_1 <- temperature_simulation(c(500, soybean_weather2002$temp + 2.0)) hot_result_2 <- temperature_simulation(list(Catm = 500, temp = soybean_weather2002$temp + 2.0))  # Example 3: varying the temperature input to the 'thermal_time_linear' module thermal_time_rate <- partial_evaluate_module(   'thermal_time_linear',   within(miscanthus_x_giganteus_parameters, {time = 1}),   c(\"temp\") ) rate_25 <- thermal_time_rate(25)"},{"path":"/reference/run_biocro.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Crop Growth with BioCro — run_biocro","title":"Simulate Crop Growth with BioCro — run_biocro","text":"Runs full crop growth simulation using BioCro framework","code":""},{"path":"/reference/run_biocro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Crop Growth with BioCro — run_biocro","text":"","code":"run_biocro(     initial_values = list(),     parameters = list(),     drivers,     direct_module_names = list(),     differential_module_names = list(),     ode_solver = BioCro:::default_ode_solver,     verbose = FALSE )"},{"path":"/reference/run_biocro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Crop Growth with BioCro — run_biocro","text":"initial_values list named quantities representing initial values     differential quantities, .e., quantities whose derivatives     calculated differential modules parameters list named quantities change time; must include     'timestep' parameter (see `drivers` info) drivers data frame quantities defined equally spaced time intervals.     time interval specified `parameters` quantity called     'timestep' units hours. drivers must include columns     either (1) 'time' (units days) (2) 'doy' 'hour'. direct_module_names character vector list specifying names direct modules use     system; list available modules can obtained via     get_all_modules function differential_module_names character vector list specifying names differential modules     use system; list available modules can obtained via     get_all_modules function ode_solver list specifying details numerical ODE solver. required     elements : type: string specifying name algorithm use;             list available options can obtained using             get_all_ode_solvers function. output_step_size: output step size. smaller 1,             equal 1.0 / N integer N. larger 1,             integer. adaptive_rel_error_tol: used set relative error             tolerance adaptive step size methods adaptive_abs_error_tol: used set absolute error             tolerance adaptive step size methods adaptive_max_steps: determines many times adaptive             step size method attempt find new step size             indicating failure  verbose logical variable indicating whether print dynamical system     validation information. (detailed startup information can obtained     validate_dynamical_system_inputs function.)","code":""},{"path":"/reference/run_biocro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Crop Growth with BioCro — run_biocro","text":"run_biocro important function BioCro package.   input arguments function used define dynamical system   solve time evolution desired time period. details   function operates, see BioCro II paper.","code":""},{"path":"/reference/run_biocro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Crop Growth with BioCro — run_biocro","text":"data frame column represents one quantities included   simulation (exception parameters, since values   guaranteed change time) row represents time point","code":""},{"path":[]},{"path":"/reference/run_biocro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Crop Growth with BioCro — run_biocro","text":"","code":"# Example: running a miscanthus simulation using weather data from 2005 result <- run_biocro(     miscanthus_x_giganteus_initial_values,     miscanthus_x_giganteus_parameters,     get_growing_season_climate(weather2005),     miscanthus_x_giganteus_direct_modules,     miscanthus_x_giganteus_differential_modules,     miscanthus_x_giganteus_ode_solver,     TRUE ) #>  #> System startup information: #>  #> [pass] No quantities were defined multiple times in the inputs #>  #> [pass] All module inputs were properly defined #>  #> [pass] All differential module outputs were included in the initial values #>  #> [pass] There are no cyclic dependencies among the direct modules. #>  #> ODE solver description: #> Name: auto #> This ode_solver chooses between two defaults depending on the type of system it integrates #> ode_solver used for dynamical systems that do not require the Euler method: #> Name: rsnbrk #> Output step size: 1.000000 #> Relative error tolerance: 0.000010 #> Absolute error tolerance: 0.000010 #> Maximum attempts to find a new step size: 200 #> ode_solver used for dynamical systems that require the Euler method: #> Name: homemade_euler #>  #> The ODE solver reports the following: #> The ode_solver for dynamical systems that require the Euler method was used. #> It reports the following information: #> N/A #> The dynamical system reports the following: #> 4296 derivatives were calculated #>   lattice::xyplot(   Leaf + Stem + Root + Grain ~ TTc,   data=result,   type='l',   auto=TRUE )"},{"path":"/reference/system_derivatives.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Derivatives for Differential Quantities — system_derivatives","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"Solving BioCro model using one R's available differential equation   solvers","code":""},{"path":"/reference/system_derivatives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"","code":"system_derivatives(   parameters = list(),   drivers,   direct_module_names = list(),   differential_module_names = list() )"},{"path":"/reference/system_derivatives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"input arguments system_derivatives   corresponding inputs run_biocro.","code":""},{"path":"/reference/system_derivatives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"return value system_derivatives function three inputs   (t, differential_quantities, parms) returns   derivatives differential quantities dynamical system   determined original inputs (parameters, drivers,  direct_module_names, differential_module_names). function signature requirements inputs set  LSODES function deSolve package. t input   single time value differential_quantities input   vector names differential quantities defined   modules. parms required LSODES, use   anything. function can passed LSODES alternative integration   method, rather using one BioCro's built-solvers.","code":""},{"path":[]},{"path":"/reference/system_derivatives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"","code":"# Example 1: calculating a single derivative using a soybean model  soybean_system <- system_derivatives(   soybean_parameters,   soybean_weather2002,   soybean_direct_modules,   soybean_differential_modules )  derivs <- soybean_system(0, unlist(soybean_initial_values), NULL)  # Example 2: a simple oscillator with only one module (requires deSolve)  if (FALSE) { if (require(deSolve)) {    times = seq(0, 5, length=100)    oscillator_system_derivatives <- system_derivatives(     list(       timestep = 1,       mass = 1,       spring_constant = 1     ),     data.frame(time=times),     character(),     'harmonic_oscillator'   )    result <- as.data.frame(lsodes(     c(position=0, velocity=1),     times,     oscillator_system_derivatives   ))    lattice::xyplot(     position + velocity ~ time,     type='l',     auto=TRUE,     data=result   ) } }  # Example 3: solving 500 hours of a soybean simulation. This requires the # deSolve package and will run very slow compared to a regular call to # `run_biocro`. if (FALSE) { if (require(deSolve)) {   soybean_system <- system_derivatives(     soybean_parameters,     soybean_weather2002,     soybean_direct_modules,     soybean_differential_modules   )    times = seq(from=0, to=500, by=1)    result <- as.data.frame(lsodes(unlist(soybean_initial_values), times, soybean_system))    lattice::xyplot(Leaf + Stem ~ time, type='l', auto=TRUE, data=result) } }"}]
